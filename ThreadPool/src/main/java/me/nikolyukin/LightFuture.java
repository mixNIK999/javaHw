package me.nikolyukin;

import java.util.function.Function;

/**
 * Интерфейс задач принятых к исполнению пулом потоков. Позволяет пользователю узнать выполнена ли
 * задача, получить результат, и добавить новые задачи зависящие от данной.
 *
 * @param <T> - тип результата.
 */
public interface LightFuture<T> {

    /**
     * Метод возвращает, выполнена ли задача.
     *
     * @return true, если задача выполнена.
     */
    boolean isReady();

    /**
     * Метод возвращает результат выполнения задачи. Если результат еще не вычислен, метод ожидает
     * его и возвращает полученное значение.
     *
     * @return результат вычисления.
     * @throws LightExecutionException если соответствующий задаче supplier завершился с
     * исключением.
     */
    T get() throws LightExecutionException;

    /**
     * принимает объект типа Function, который может быть применен к результату данной задачи X и
     * возвращает новую задачу Y, принятую к исполнению. Новая задача будет исполнена не ранее, чем
     * завершится исходная. Не блокирует работу потока, если результат задачи X ещё не вычислен.
     *
     * @param function - функция которой будет передана исходная задача.
     * @param <R> - тип возвращаемого значения переданной функции.
     * @return задачу LightFuture, которая применит function к результату данной задачи.
     */
    <R> LightFuture<R> thenApply(Function<T, R> function);
}
